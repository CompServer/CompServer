Prior work
https://github.com/kevinharvey/django-tourney
https://github.com/psgoral/Django-Tournament-Creator

Useful libraries
https://www.aropupu.fi/bracket/
    Probably not worth hacking to handle 3 or more teams for a single match
    HTML / CSS it generates can be used as a model
https://www.aropupu.fi/group/
https://htmx.org/
    For live updates

Questions
Do we need to handle / show penalties?

Scenarios (in order of rank ABCD...)
max4adv1
    ACE
        AB
    BDF
    Instead of
    ACEF
        AB
    BD (this group has an unfair advantage)
max4adv2
    ACEG
        ACB
    BDF
    Or maybe rather
    ACEG
        ACBD
    BDF
    Both are valid: the organizer could want either (how to let them choose?)
Version 1
Only handle 1v1 single-elimination tournament
Create Schools and Teams through the Django admin interface
Setup a tournament:
    Enter number of teams (force it to be a power of two: no bye's)
    Add teams: the order you add them determines the seeding
    Generate matches
Run a tournament:
    Visually show the bracket (with jQuery Bracket-like visualization)
    Judge (only) clicking on a match -> score entering page (could be admin for the Match initially)
    Judge (only) enters who advanced for the Match
    Viewers refresh  (manually) to show who advanced
    
Version 2


Use HTMX to poll to refresh the bracket like https://www.youtube.com/watch?v=QsGZ9361hlU


Common language
- Organization (vs School)
- Competition (RoboMed 2024) vs Tournament (Sumo SET)
- Event (Sumo)
- Match (one encounter 1v1 or 4v4)

Questions
- What do you hope to get from the project
    - why the current solution is bad / hard
        - making sure every team has the same # matches in prelim rounds, not in same place at the same time and not competing against the same team twice (across multiple events)
        - don't miss any matches (recording win / loss)
    - what are some cool things you think it could provide
        - unique ID for match to make the scorekeeper's job easier
- Are statuses currently sufficient?
- Penalties?
- Sensitivities of data (probably no student names but what about coaches)
- Ever any need to give variable points (not just win / loss)
- Specific time for matches?


Product Owner (jschwartz) Presentation Notes
- Preliminary rounds determine the seeding of the tournament
- Each event is worth the same # points (different points per match event)
- As much wait time between matches as possible (evenly spread out): avoid back to back matches
- 4 points for winning the SET 
- Each judge is dedicated to a specific arena / event 
- Speed race could be 1 v 1
- 20 sportsmanship points that get taken away (penalties)

Shared document with everyone on how roundrobin works

jmulligan:
Did some research on HTMX using this turorial: https://www.mattlayman.com/blog/2021/how-to-htmx-django/
This allows us to delete tasks on the test project without needing to go to a seperate page, not exactly what we want.

I found a better example on this GH repo: https://github.com/adamchainz/django-htmx/tree/main/example

I cloned this and ran it and it does the following:

There is a paginator page which has a list of people that you can click next to go to the next 10 people.
When you click that button, rather than the entire page being reloaded, only part of the page reloads, the 10 people in the list. 
This again isn't really what we want, as far as dynamically updating results, but there is an alternate solution.

We could use this on a match results page or whatever else.

I see 2 ways of doing this:
    We could have a button below the bracket or results that says "refresh" and when you click it, it will refresh the bracket (not the whole page)
    Or, we can have some JS do what the refresh button would do at a specified interval (every 5 seconds or whatever)

Either way it is relitively easy to implement (although you may need to do some JS for the 2nd option)

For monday:

I source dived though the repository linked earlier and learned more about how it works. 
It basicalPrior work
https://github.com/kevinharvey/django-tourney
https://github.com/psgoral/Django-Tournament-Creator

Useful libraries
https://www.aropupu.fi/bracket/
    Probably not worth hacking to handle 3 or more teams for a single match
    HTML / CSS it generates can be used as a model
https://www.aropupu.fi/group/
https://htmx.org/
    For live updates

Scenarios (in order of rank ABCD...)
max4adv1
    ACE
        AB
    BDF
    Instead of
    ACEF
        AB
    BD (this group has an unfair advantage)
max4adv2
    ACEG
        ACB
    BDF
    Or maybe rather
    ACEG
        ACBD
    BDF
    Both are valid: the organizer could want either (how to let them choose?)
Version 1
Only handle 1v1 single-elimination tournament
Create Schools and Teams through the Django admin interface
Setup a tournament:
    Enter number of teams (force it to be a power of two: no bye's)
    Add teams: the order you add them determines the seeding
    Generate matches
Run a tournament:
    Visually show the bracket (with jQuery Bracket-like visualization)
    Judge (only) clicking on a match -> score entering page (could be admin for the Match initially)
    Judge (only) enters who advanced for the Match
    Viewers refresh bracket (manually) to show who advanced
    
Version 2


Use HTMX to poll to refresh the bracket like https://www.youtube.com/watch?v=QsGZ9361hlU


Common language
- Organization (vs School)
- Competition (RoboMed 2024) vs Tournament (Sumo SET) vs Event (Sumo)
- Match (one encounter 1v1 or 4v4)

Questions
- 

Product Owner (jschwartz) Presentation Notes
- Why the current solution is bad / hard
    - making sure every team has the same # matches in prelim rounds, not in same place at the same time and not competing against the same team twice (across multiple events)
    - don't miss any matches (recording win / loss)
- What are some cool things you think it could provide
    - unique ID / QR code for match to make the scorekeeper's job easier
- Preliminary rounds determine the seeding of the tournament
- Each event is worth the same # points (different points per match event)
- As much wait time between matches as possible (evenly spread out): avoid back to back matches
- 4 points for winning the SET 
- Each judge is dedicated to a specific arena / event 
- Speed race could be 1 v 1
- 20 sportsmanship points that get taken away (penalties)
- We can estimate times for a match but it depends on how streamlined the setup is (may be different for different venues, hosts)

Translation Notes
- No matter the implementation, we have to translate messages manually (very difficult ngl)
- We have to download gettext tools system library (https://stackoverflow.com/questions/53852961/installing-gettext-in-windows-cant-find-msguniq-make-sure-you-have-gnu-gettex)
- use{% translate %} tag for built-in html text, and gettext python library function for not built-in html text
- use {% load i18n %} at beginning of html doc to allow Translation

To anyone reading this, if you want to include a link to the navbar shown only on your specific
html page, you can use the block links to do so.

JM + HF
TIMEZONE STUFF
In a template we can present TZ aware times like this 
```
{% load tz %}

{% localtime on %}
    {{ value }}
{% endlocaltime %}

{% localtime off %}
    {{ value }}
{% endlocaltime %}
```
where value is a datetime object

Turns out the ^^^ doesn't work as easy as you might think. Found a different post where there is a lib that handles this for you.
It has context processors, and converts any datetime objects it sees to the user's timezone.
pip install django-tz-detect


ERRORS
(harry) WHEN EVERYTHING IS MERGED INTO THE FINAL BRANCH, WE WILL PROBABLY HAVE TO DELETE AND 
REMAKE THE DATABASE. I ran into so many "column not found" errors that were quite literally
unfixable, and the solution to those problems was to just delete the database and remake it
from scratch.
Results are completely wrong (doesn't shhow all the points earned, shows the wrong winner),
but it's probably because all our changes haven't been migrated in yet.
There are a lot of things here (ex. warning label on create tournament form) that have not
been migrated in yet.

'CreateSETournamentForm' object has no attribute 'generate_matches'
'NoneType' object has no attribute 'next_matches' (Called single_elimination_tournament)
generate_matches is always True for some reason (may tie in with the first error)
I (Harry) can't solve them because they pertain to parts of the project that I have no knowledge on

Notes about Deployment:

we are using google cloud not heroku

- Doesn't work for users marked as U18
- Access needs to be given

- Cloud SQL: MySQL or postgres

For easy deployment, we should ensure our requierments are up to date and ensure we use python3.11
Cloud has it's own secret manager but we still need secrets.yml for some secrets used in settings.py

Issues with the current version
===============================
Loading the competition page (calculating all the results) takes a long time (should have these calculated / cached ahead of time)
Results page
    Loading takes a long time 
    Not all points are showing up
    Points from RR should have same color
    Values aren't stacked (as they are in the spreadsheet)
    Thicker bars, 3D bars

Takes a **long** time to create a new RR tournament
    Notification that the click registered / disable button from clicking again

SET bracket messed looks good for some but not others
    Good: 16, 8, 12, 11, 10
    Bad: 15, 14, 7
    So-so: 13

Silently failing: judge but can't be judge
Simple way to make a tournament judgeable
* open the competition
* open the tournament
* adjust the competition and tournament timeframes

Way to create _ without needing to go through the Django admin
* Events
* Organizations
* Sports
Fix way to create _ without needing to go through the Django admin
* Teams
* Arenas

Consistent colors and styles (buttons)
